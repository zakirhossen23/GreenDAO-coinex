{
  "address": "0xC6e76Fc7Ab10c16090ee8908e504B41634D4f3f0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_dao_uris",
      "outputs": [
        {
          "internalType": "string",
          "name": "dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dao_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "finished",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ideas_uris",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ideas_uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "all_goal_ideas_votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "wallet",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        }
      ],
      "name": "create_dao",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "create_goal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_wallet",
          "type": "string"
        }
      ],
      "name": "create_goal_ideas_vote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "create_ideas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "dao_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_daos",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_goals",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        }
      ],
      "name": "get_all_goals_by_dao_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_all_ideas",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "get_all_ideas_by_goal_id",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_by_goal_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_goal_id_from_ideas_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "get_ideas_id_by_ideas_uri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "get_ideas_votes_from_goal",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        }
      ],
      "name": "goal_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        }
      ],
      "name": "ideas_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_all",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dao_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_dao_wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_dao_uri",
          "type": "string"
        }
      ],
      "name": "set_dao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goal_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_goal_uri",
          "type": "string"
        }
      ],
      "name": "set_goal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ideas_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ideas_uri",
          "type": "string"
        }
      ],
      "name": "set_ideas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x43cafb2fecb8e0e2b2793df091cb3e8d1c2eb981e6616f13f926e4485ec34232",
  "receipt": {
    "to": null,
    "from": "0x32F48d18db5A63D3345Eaee9d9C326a2cC647B80",
    "contractAddress": "0xC6e76Fc7Ab10c16090ee8908e504B41634D4f3f0",
    "transactionIndex": 0,
    "gasUsed": "3884524",
    "logsBloom": "0x
    "blockHash": "0xf9b7048742bf3e681669e8efa9ea6ac3c408566d9ef04038f94fde2dd302aa8f",
    "transactionHash": "0x43cafb2fecb8e0e2b2793df091cb3e8d1c2eb981e6616f13f926e4485ec34232",
    "logs": [],
    "blockNumber": 13540403,
    "cumulativeGasUsed": "3884524",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "tCET",
    "tCET"
  ],
  "numDeployments": 12,
  "solcInputHash": "993d26b7144ac134fba0631f7da5f308",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_dao_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dao_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"finished\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ideas_uris\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ideas_uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"all_goal_ideas_votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"create_dao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"create_goal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_wallet\",\"type\":\"string\"}],\"name\":\"create_goal_ideas_vote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"create_ideas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"dao_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_daos\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_goals\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"}],\"name\":\"get_all_goals_by_dao_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_all_ideas\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"get_all_ideas_by_goal_id\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_by_goal_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_goal_id_from_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"get_ideas_id_by_ideas_uri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"get_ideas_votes_from_goal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"}],\"name\":\"goal_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"}],\"name\":\"ideas_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dao_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_dao_wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dao_uri\",\"type\":\"string\"}],\"name\":\"set_dao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_goal_uri\",\"type\":\"string\"}],\"name\":\"set_goal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ideas_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ideas_uri\",\"type\":\"string\"}],\"name\":\"set_ideas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CoinExERC721.sol\":\"CoinExERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CoinExERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract CoinExERC721 is ERC721 {\\r\\n    struct dao_uri_struct {\\r\\n        string dao_wallet;\\r\\n        string dao_uri;\\r\\n        string finished;\\r\\n    }\\r\\n    struct goal_uri_struct {\\r\\n        uint256 dao_id;\\r\\n        string goal_uri;\\r\\n    }\\r\\n\\r\\n    struct ideas_uri_struct {\\r\\n        uint256 goal_id;\\r\\n        string ideas_uri;\\r\\n    }\\r\\n\\r\\n    struct goal_ideas_votes_struct {\\r\\n        uint256 goal_id;\\r\\n        uint256 ideas_id;\\r\\n        string wallet;\\r\\n    }\\r\\n\\r\\n    uint256 private _dao_ids;\\r\\n    uint256 private _goal_ids;\\r\\n    uint256 private _ideas_ids;\\r\\n    uint256 private _ideas_vote_ids;\\r\\n    mapping(uint256 => dao_uri_struct) public _dao_uris;                        //_dao_ids          => (Dao)    Dao Wallet + Dao URI   + Finished\\r\\n    mapping(uint256 => goal_uri_struct) private _goal_uris;                     //_goal_ids         => (Goal)   Dao ID + Goal URI\\r\\n    mapping(uint256 => ideas_uri_struct) public _ideas_uris;                    //_ideas_ids        => (Ideas)  Goal ID + Ideas URI\\r\\n    mapping(uint256 => goal_ideas_votes_struct) public all_goal_ideas_votes;    //_ideas_vote_ids   => (Vote)   Goal ID + Ideas ID + Wallet\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    constructor(string memory name, string memory symbol)\\r\\n        ERC721(name, symbol)\\r\\n    {}\\r\\n\\r\\n    //Daos\\r\\n    function create_dao(string memory _dao_wallet, string memory _dao_uri)\\r\\n        public\\r\\n        returns (uint256)\\r\\n    {\\r\\n        //Create Dao into _dao_uris\\r\\n        _dao_uris[_dao_ids] = dao_uri_struct(_dao_wallet, _dao_uri, \\\"False\\\");\\r\\n        _dao_ids++;\\r\\n\\r\\n        return _dao_ids;\\r\\n    }\\r\\n\\r\\n    function set_dao(\\r\\n        uint256 _dao_id,\\r\\n        string memory _dao_wallet,\\r\\n        string memory _dao_uri\\r\\n    ) public {\\r\\n        //Set Dao of wallet and uri\\r\\n        _dao_uris[_dao_id].dao_wallet = _dao_wallet;\\r\\n        _dao_uris[_dao_id].dao_uri = _dao_uri;\\r\\n    }\\r\\n\\r\\n    function get_all_daos() public view returns (string[] memory) {\\r\\n        //Getting all doas\\r\\n        string[] memory _StoreInfo = new string[](_dao_ids);\\r\\n        for (uint256 i = 0; i < _dao_ids; i++) {\\r\\n            _StoreInfo[i] = _dao_uris[i].dao_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n\\r\\n    function dao_uri(uint256 _dao_id) public view returns (string memory) {\\r\\n        //Getting one dao URI\\r\\n        return _dao_uris[_dao_id].dao_uri;\\r\\n    }\\r\\n\\r\\n    //Goals\\r\\n    function create_goal(string memory _goal_uri, uint256 _dao_id) public returns (uint256)\\r\\n    {\\r\\n        //Create goal into _goal_uris\\r\\n        _goal_uris[_goal_ids] = goal_uri_struct(_dao_id, _goal_uri);\\r\\n        _goal_ids++;\\r\\n\\r\\n        return _goal_ids;\\r\\n    }\\r\\n\\r\\n    function set_goal(uint256 _goal_id, string memory _goal_uri) public {\\r\\n        //Set goal uri\\r\\n        _goal_uris[_goal_id].goal_uri = _goal_uri;\\r\\n    }\\r\\n\\r\\n    function get_all_goals() public view returns (string[] memory) {\\r\\n        //Getting all goals\\r\\n        string[] memory _StoreInfo = new string[](_goal_ids);\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n            _StoreInfo[i] = _goal_uris[i].goal_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function get_all_goals_by_dao_id(uint256 _dao_id) public view returns (string[] memory) {\\r\\n        //Getting all goals by dao id\\r\\n        string[] memory _StoreInfo = new string[](_goal_ids);\\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n          if (_goal_uris[i].dao_id == _dao_id){\\r\\n            _StoreInfo[_store_id] = _goal_uris[i].goal_uri;\\r\\n            _store_id++;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function get_goal_id_by_goal_uri(string memory _goal_uri) public view returns (uint256) {\\r\\n        //Getting goal id by uri\\r\\n        for (uint256 i = 0; i < _goal_ids; i++) {\\r\\n          if (keccak256(bytes(_goal_uris[i].goal_uri)) == keccak256(bytes(_goal_uri))) return  i;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function goal_uri(uint256 _goal_id) public view returns (string memory) {\\r\\n        //Getting one goal URI\\r\\n        return _goal_uris[_goal_id].goal_uri;\\r\\n    }\\r\\n\\r\\n\\r\\n    //Ideas\\r\\n    function create_ideas(string memory _ideas_uri, uint256 _goal_id) public returns (uint256)\\r\\n    {\\r\\n        //Create ideas into _ideas_uris\\r\\n        _ideas_uris[_ideas_ids] = ideas_uri_struct(_goal_id, _ideas_uri);\\r\\n        _ideas_ids++;\\r\\n\\r\\n        return _ideas_ids;\\r\\n    }\\r\\n\\r\\n    function set_ideas(uint256 _ideas_id, string memory _ideas_uri) public {\\r\\n        //Set ideas uri\\r\\n        _ideas_uris[_ideas_id].ideas_uri = _ideas_uri;\\r\\n    }\\r\\n\\r\\n    function get_all_ideas() public view returns (string[] memory) {\\r\\n        //Getting all ideas\\r\\n        string[] memory _StoreInfo = new string[](_ideas_ids);\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n            _StoreInfo[i] = _ideas_uris[i].ideas_uri;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function get_all_ideas_by_goal_id(uint256 _goal_id) public view returns (string[] memory) {\\r\\n        //Getting all ideas by goal id\\r\\n        string[] memory _StoreInfo = new string[](_ideas_ids);        \\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n          if (_ideas_uris[i].goal_id == _goal_id)\\r\\n            _StoreInfo[_store_id] = _ideas_uris[i].ideas_uri;\\r\\n            _store_id++;\\r\\n        }\\r\\n\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function get_ideas_id_by_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\\r\\n        //Getting ideas id by uri\\r\\n        for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n          if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return  i;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function get_goal_id_from_ideas_uri(string memory _ideas_uri) public view returns (uint256) {\\r\\n     //Getting ideas id by uri\\r\\n     for (uint256 i = 0; i < _ideas_ids; i++) {\\r\\n       if (keccak256(bytes(_ideas_uris[i].ideas_uri)) == keccak256(bytes(_ideas_uri))) return  _ideas_uris[i].goal_id;\\r\\n     }\\r\\n\\r\\n     return 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    function ideas_uri(uint256 _ideas_id) public view returns (string memory) {\\r\\n        //Getting one ideas URI\\r\\n        return _ideas_uris[_ideas_id].ideas_uri;\\r\\n    }\\r\\n\\r\\n\\r\\n    //Votes\\r\\n    function create_goal_ideas_vote(uint256 _goal_id, uint256 _ideas_id,string memory _wallet) public returns (uint256)\\r\\n    {\\r\\n        //Create votes into all_goal_ideas_votes\\r\\n        all_goal_ideas_votes[_ideas_vote_ids] = goal_ideas_votes_struct(_goal_id, _ideas_id,_wallet);\\r\\n        _ideas_vote_ids++;\\r\\n\\r\\n        return _ideas_vote_ids;\\r\\n    }\\r\\n\\r\\n\\r\\n   function get_ideas_votes_from_goal(uint256 _goal_id, uint256 _ideas_id) public view returns (string[] memory)\\r\\n    {\\r\\n        //gets all ideas votes from goal\\r\\n        string[] memory _StoreInfo = new string[](_ideas_vote_ids);\\r\\n        uint256 _store_id;\\r\\n        for (uint256 i = 0; i < _ideas_vote_ids; i++) {\\r\\n          if (all_goal_ideas_votes[i].goal_id == _goal_id && all_goal_ideas_votes[i].ideas_id == _ideas_id )\\r\\n            _StoreInfo[_store_id] = all_goal_ideas_votes[i].wallet;\\r\\n            _store_id++;\\r\\n        }\\r\\n        return _StoreInfo;\\r\\n    }\\r\\n\\r\\n    function reset_all() public {\\r\\n      _dao_ids = 0;\\r\\n      _goal_ids = 0;\\r\\n      _ideas_ids = 0;\\r\\n      _ideas_vote_ids = 0;\\r\\n      for (uint256 i = 0; i < _dao_ids; i++)            delete _dao_uris[i];\\r\\n      for (uint256 i = 0; i < _goal_ids; i++)           delete _goal_uris[i];\\r\\n      for (uint256 i = 0; i < _ideas_ids; i++)          delete _ideas_uris[i];\\r\\n      for (uint256 i = 0; i < _ideas_vote_ids; i++)     delete all_goal_ideas_votes[i];    \\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    //Test\\r\\n    function dao() public returns (string[] memory) {\\r\\n        create_dao(\\\"wallet #1\\\", \\\"DAO metadata #1\\\");\\r\\n        create_dao(\\\"wallet #2\\\", \\\"DAO metadata #2\\\");\\r\\n        return get_all_daos();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8dd769a837f2386883441b3059aa21d898657cf54d38a9a85033d2ee2ac04625\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004838380380620048388339818101604052810190620000379190620001a3565b818181600090805190602001906200005192919062000075565b5080600190805190602001906200006a92919062000075565b5050505050620003ac565b8280546200008390620002bd565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b60006200013c620001368462000251565b62000228565b9050828152602081018484840111156200015b576200015a6200038c565b5b6200016884828562000287565b509392505050565b600082601f83011262000188576200018762000387565b5b81516200019a84826020860162000125565b91505092915050565b60008060408385031215620001bd57620001bc62000396565b5b600083015167ffffffffffffffff811115620001de57620001dd62000391565b5b620001ec8582860162000170565b925050602083015167ffffffffffffffff81111562000210576200020f62000391565b5b6200021e8582860162000170565b9150509250929050565b60006200023462000247565b9050620002428282620002f3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026f576200026e62000358565b5b6200027a826200039b565b9050602081019050919050565b60005b83811015620002a75780820151818401526020810190506200028a565b83811115620002b7576000848401525b50505050565b60006002820490506001821680620002d657607f821691505b60208210811415620002ed57620002ec62000329565b5b50919050565b620002fe826200039b565b810181811067ffffffffffffffff8211171562000320576200031f62000358565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61447c80620003bc6000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c806371085cab11610130578063aa4cdf2a116100b8578063c29595c51161007c578063c29595c51461073c578063c4c2e36414610758578063c87b56dd14610788578063e32acc1a146107b8578063e985e9c5146107e857610232565b8063aa4cdf2a146106ac578063b16060a6146106dc578063b88d4fde146106e6578063c04e743014610702578063c04fe9781461071e57610232565b80638da5cb5b116100ff5780638da5cb5b1461060657806395d89b411461062457806397ee760614610642578063a1ca917814610660578063a22cb4651461069057610232565b806371085cab1461055a57806382fcc7321461058a578063881de858146105ba5780638d3d2595146105d657610232565b806327a568b9116101be578063468d0c8011610182578063468d0c80146104695780634be7adb51461049a5780635d907da1146104ca5780636352211e146104fa57806370a082311461052a57610232565b806327a568b9146103af57806329b56f60146103e15780632d9cb1ab146103ff5780634162169f1461042f57806342842e0e1461044d57610232565b8063109ac97011610205578063109ac970146102d1578063131d44f2146103015780631ba44c4c146103315780631e9ac9f51461036357806323b872dd1461039357610232565b806301ffc9a71461023757806306fdde0314610267578063081812fc14610285578063095ea7b3146102b5575b600080fd5b610251600480360381019061024c9190613185565b610818565b60405161025e9190613938565b60405180910390f35b61026f6108fa565b60405161027c9190613953565b60405180910390f35b61029f600480360381019061029a91906132fc565b61098c565b6040516102ac91906138af565b60405180910390f35b6102cf60048036038101906102ca9190613145565b610a11565b005b6102eb60048036038101906102e691906132fc565b610b29565b6040516102f89190613916565b60405180910390f35b61031b600480360381019061031691906132fc565b610c99565b6040516103289190613916565b60405180910390f35b61034b600480360381019061034691906132fc565b610e09565b60405161035a93929190613b8c565b60405180910390f35b61037d600480360381019061037891906131df565b610ebb565b60405161038a9190613b41565b60405180910390f35b6103ad60048036038101906103a8919061302f565b610f2d565b005b6103c960048036038101906103c491906132fc565b610f8d565b6040516103d893929190613975565b60405180910390f35b6103e961114f565b6040516103f69190613916565b60405180910390f35b610419600480360381019061041491906132a0565b61128a565b6040516104269190613b41565b60405180910390f35b610437611303565b6040516104449190613916565b60405180910390f35b6104676004803603810190610462919061302f565b6113fc565b005b610483600480360381019061047e91906132fc565b61141c565b604051610491929190613b5c565b60405180910390f35b6104b460048036038101906104af9190613410565b6114c8565b6040516104c19190613916565b60405180910390f35b6104e460048036038101906104df91906132fc565b61165a565b6040516104f19190613953565b60405180910390f35b610514600480360381019061050f91906132fc565b611702565b60405161052191906138af565b60405180910390f35b610544600480360381019061053f9190612fc2565b6117b4565b6040516105519190613b41565b60405180910390f35b610574600480360381019061056f91906132a0565b61186c565b6040516105819190613b41565b60405180910390f35b6105a4600480360381019061059f9190613450565b6118e5565b6040516105b19190613b41565b60405180910390f35b6105d460048036038101906105cf9190613385565b61196f565b005b6105f060048036038101906105eb91906132fc565b6119ca565b6040516105fd9190613953565b60405180910390f35b61060e611a72565b60405161061b91906138af565b60405180910390f35b61062c611a98565b6040516106399190613953565b60405180910390f35b61064a611b2a565b6040516106579190613916565b60405180910390f35b61067a600480360381019061067591906131df565b611c65565b6040516106879190613b41565b60405180910390f35b6106aa60048036038101906106a59190613105565b611cd7565b005b6106c660048036038101906106c191906131df565b611ced565b6040516106d39190613b41565b60405180910390f35b6106e4611d75565b005b61070060048036038101906106fb9190613082565b611ef3565b005b61071c60048036038101906107179190613329565b611f55565b005b610726611f84565b6040516107339190613916565b60405180910390f35b61075660048036038101906107519190613329565b6120bf565b005b610772600480360381019061076d9190613228565b6120ee565b60405161077f9190613b41565b60405180910390f35b6107a2600480360381019061079d91906132fc565b6121d2565b6040516107af9190613953565b60405180910390f35b6107d260048036038101906107cd91906132fc565b612279565b6040516107df9190613953565b60405180910390f35b61080260048036038101906107fd9190612fef565b612321565b60405161080f9190613938565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108e357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108f357506108f2826123b5565b5b9050919050565b60606000805461090990613e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461093590613e6f565b80156109825780601f1061095757610100808354040283529160200191610982565b820191906000526020600020905b81548152906001019060200180831161096557829003601f168201915b5050505050905090565b60006109978261241f565b6109d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cd90613ac1565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a1c82611702565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8490613b01565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610aac61248b565b73ffffffffffffffffffffffffffffffffffffffff161480610adb5750610ada81610ad561248b565b612321565b5b610b1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1190613a61565b60405180910390fd5b610b248383612493565b505050565b6060600060075467ffffffffffffffff811115610b4957610b48614008565b5b604051908082528060200260200182016040528015610b7c57816020015b6060815260200190600190039081610b675790505b509050600080600090505b600754811015610c8e5784600b6000838152602001908152602001600020600001541415610c7b57600b60008281526020019081526020016000206001018054610bd090613e6f565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfc90613e6f565b8015610c495780601f10610c1e57610100808354040283529160200191610c49565b820191906000526020600020905b815481529060010190602001808311610c2c57829003601f168201915b5050505050838381518110610c6157610c60613fd9565b5b60200260200101819052508180610c7790613ed2565b9250505b8080610c8690613ed2565b915050610b87565b508192505050919050565b6060600060085467ffffffffffffffff811115610cb957610cb8614008565b5b604051908082528060200260200182016040528015610cec57816020015b6060815260200190600190039081610cd75790505b509050600080600090505b600854811015610dfe5784600c6000838152602001908152602001600020600001541415610ddd57600c60008281526020019081526020016000206001018054610d4090613e6f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6c90613e6f565b8015610db95780601f10610d8e57610100808354040283529160200191610db9565b820191906000526020600020905b815481529060010190602001808311610d9c57829003601f168201915b5050505050838381518110610dd157610dd0613fd9565b5b60200260200101819052505b8180610de890613ed2565b9250508080610df690613ed2565b915050610cf7565b508192505050919050565b600d602052806000526040600020600091509050806000015490806001015490806002018054610e3890613e6f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6490613e6f565b8015610eb15780601f10610e8657610100808354040283529160200191610eb1565b820191906000526020600020905b815481529060010190602001808311610e9457829003601f168201915b5050505050905083565b600080600090505b600754811015610f22578280519060200120600b6000838152602001908152602001600020600101604051610ef89190613874565b60405180910390201415610f0f5780915050610f28565b8080610f1a90613ed2565b915050610ec3565b50600090505b919050565b610f3e610f3861248b565b8261254c565b610f7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7490613b21565b60405180910390fd5b610f8883838361262a565b505050565b600a602052806000526040600020600091509050806000018054610fb090613e6f565b80601f0160208091040260200160405190810160405280929190818152602001828054610fdc90613e6f565b80156110295780601f10610ffe57610100808354040283529160200191611029565b820191906000526020600020905b81548152906001019060200180831161100c57829003601f168201915b50505050509080600101805461103e90613e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461106a90613e6f565b80156110b75780601f1061108c576101008083540402835291602001916110b7565b820191906000526020600020905b81548152906001019060200180831161109a57829003601f168201915b5050505050908060020180546110cc90613e6f565b80601f01602080910402602001604051908101604052809291908181526020018280546110f890613e6f565b80156111455780601f1061111a57610100808354040283529160200191611145565b820191906000526020600020905b81548152906001019060200180831161112857829003601f168201915b5050505050905083565b6060600060075467ffffffffffffffff81111561116f5761116e614008565b5b6040519080825280602002602001820160405280156111a257816020015b606081526020019060019003908161118d5790505b50905060005b60075481101561128257600b600082815260200190815260200160002060010180546111d390613e6f565b80601f01602080910402602001604051908101604052809291908181526020018280546111ff90613e6f565b801561124c5780601f106112215761010080835404028352916020019161124c565b820191906000526020600020905b81548152906001019060200180831161122f57829003601f168201915b505050505082828151811061126457611263613fd9565b5b6020026020010181905250808061127a90613ed2565b9150506111a8565b508091505090565b6000604051806040016040528083815260200184815250600c600060085481526020019081526020016000206000820151816000015560208201518160010190805190602001906112dc929190612d96565b50905050600860008154809291906112f390613ed2565b9190505550600854905092915050565b60606113796040518060400160405280600981526020017f77616c6c657420233100000000000000000000000000000000000000000000008152506040518060400160405280600f81526020017f44414f206d6574616461746120233100000000000000000000000000000000008152506120ee565b506113ee6040518060400160405280600981526020017f77616c6c657420233200000000000000000000000000000000000000000000008152506040518060400160405280600f81526020017f44414f206d6574616461746120233200000000000000000000000000000000008152506120ee565b506113f7611f84565b905090565b61141783838360405180602001604052806000815250611ef3565b505050565b600c60205280600052604060002060009150905080600001549080600101805461144590613e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461147190613e6f565b80156114be5780601f10611493576101008083540402835291602001916114be565b820191906000526020600020905b8154815290600101906020018083116114a157829003601f168201915b5050505050905082565b6060600060095467ffffffffffffffff8111156114e8576114e7614008565b5b60405190808252806020026020018201604052801561151b57816020015b60608152602001906001900390816115065790505b509050600080600090505b60095481101561164e5785600d60008381526020019081526020016000206000015414801561156a575084600d600083815260200190815260200160002060010154145b1561162d57600d6000828152602001908152602001600020600201805461159090613e6f565b80601f01602080910402602001604051908101604052809291908181526020018280546115bc90613e6f565b80156116095780601f106115de57610100808354040283529160200191611609565b820191906000526020600020905b8154815290600101906020018083116115ec57829003601f168201915b505050505083838151811061162157611620613fd9565b5b60200260200101819052505b818061163890613ed2565b925050808061164690613ed2565b915050611526565b50819250505092915050565b6060600a6000838152602001908152602001600020600101805461167d90613e6f565b80601f01602080910402602001604051908101604052809291908181526020018280546116a990613e6f565b80156116f65780601f106116cb576101008083540402835291602001916116f6565b820191906000526020600020905b8154815290600101906020018083116116d957829003601f168201915b50505050509050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a290613aa1565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181c90613a81565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000604051806040016040528083815260200184815250600b600060075481526020019081526020016000206000820151816000015560208201518160010190805190602001906118be929190612d96565b50905050600760008154809291906118d590613ed2565b9190505550600754905092915050565b6000604051806060016040528085815260200184815260200183815250600d6000600954815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190611947929190612d96565b509050506009600081548092919061195e90613ed2565b919050555060095490509392505050565b81600a60008581526020019081526020016000206000019080519060200190611999929190612d96565b5080600a600085815260200190815260200160002060010190805190602001906119c4929190612d96565b50505050565b6060600c600083815260200190815260200160002060010180546119ed90613e6f565b80601f0160208091040260200160405190810160405280929190818152602001828054611a1990613e6f565b8015611a665780601f10611a3b57610100808354040283529160200191611a66565b820191906000526020600020905b815481529060010190602001808311611a4957829003601f168201915b50505050509050919050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060018054611aa790613e6f565b80601f0160208091040260200160405190810160405280929190818152602001828054611ad390613e6f565b8015611b205780601f10611af557610100808354040283529160200191611b20565b820191906000526020600020905b815481529060010190602001808311611b0357829003601f168201915b5050505050905090565b6060600060085467ffffffffffffffff811115611b4a57611b49614008565b5b604051908082528060200260200182016040528015611b7d57816020015b6060815260200190600190039081611b685790505b50905060005b600854811015611c5d57600c60008281526020019081526020016000206001018054611bae90613e6f565b80601f0160208091040260200160405190810160405280929190818152602001828054611bda90613e6f565b8015611c275780601f10611bfc57610100808354040283529160200191611c27565b820191906000526020600020905b815481529060010190602001808311611c0a57829003601f168201915b5050505050828281518110611c3f57611c3e613fd9565b5b60200260200101819052508080611c5590613ed2565b915050611b83565b508091505090565b600080600090505b600854811015611ccc578280519060200120600c6000838152602001908152602001600020600101604051611ca29190613874565b60405180910390201415611cb95780915050611cd2565b8080611cc490613ed2565b915050611c6d565b50600090505b919050565b611ce9611ce261248b565b8383612891565b5050565b600080600090505b600854811015611d6a578280519060200120600c6000838152602001908152602001600020600101604051611d2a9190613874565b60405180910390201415611d5757600c600082815260200190815260200160002060000154915050611d70565b8080611d6290613ed2565b915050611cf5565b50600090505b919050565b600060068190555060006007819055506000600881905550600060098190555060005b600654811015611dfb57600a600082815260200190815260200160002060008082016000611dc69190612e1c565b600182016000611dd69190612e1c565b600282016000611de69190612e1c565b50508080611df390613ed2565b915050611d98565b5060005b600754811015611e4a57600b6000828152602001908152602001600020600080820160009055600182016000611e359190612e1c565b50508080611e4290613ed2565b915050611dff565b5060005b600854811015611e9957600c6000828152602001908152602001600020600080820160009055600182016000611e849190612e1c565b50508080611e9190613ed2565b915050611e4e565b5060005b600954811015611ef057600d60008281526020019081526020016000206000808201600090556001820160009055600282016000611edb9190612e1c565b50508080611ee890613ed2565b915050611e9d565b50565b611f04611efe61248b565b8361254c565b611f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3a90613b21565b60405180910390fd5b611f4f848484846129fe565b50505050565b80600c60008481526020019081526020016000206001019080519060200190611f7f929190612d96565b505050565b6060600060065467ffffffffffffffff811115611fa457611fa3614008565b5b604051908082528060200260200182016040528015611fd757816020015b6060815260200190600190039081611fc25790505b50905060005b6006548110156120b757600a6000828152602001908152602001600020600101805461200890613e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461203490613e6f565b80156120815780601f1061205657610100808354040283529160200191612081565b820191906000526020600020905b81548152906001019060200180831161206457829003601f168201915b505050505082828151811061209957612098613fd9565b5b602002602001018190525080806120af90613ed2565b915050611fdd565b508091505090565b80600b600084815260200190815260200160002060010190805190602001906120e9929190612d96565b505050565b600060405180606001604052808481526020018381526020016040518060400160405280600581526020017f46616c7365000000000000000000000000000000000000000000000000000000815250815250600a600060065481526020019081526020016000206000820151816000019080519060200190612171929190612d96565b50602082015181600101908051906020019061218e929190612d96565b5060408201518160020190805190602001906121ab929190612d96565b50905050600660008154809291906121c290613ed2565b9190505550600654905092915050565b60606121dd8261241f565b61221c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221390613ae1565b60405180910390fd5b6000612226612a5a565b905060008151116122465760405180602001604052806000815250612271565b8061225084612a71565b60405160200161226192919061388b565b6040516020818303038152906040525b915050919050565b6060600b6000838152602001908152602001600020600101805461229c90613e6f565b80601f01602080910402602001604051908101604052809291908181526020018280546122c890613e6f565b80156123155780601f106122ea57610100808354040283529160200191612315565b820191906000526020600020905b8154815290600101906020018083116122f857829003601f168201915b50505050509050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661250683611702565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006125578261241f565b612596576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258d90613a41565b60405180910390fd5b60006125a183611702565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806125e357506125e28185612321565b5b8061262157508373ffffffffffffffffffffffffffffffffffffffff166126098461098c565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661264a82611702565b73ffffffffffffffffffffffffffffffffffffffff16146126a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612697906139e1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612710576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270790613a01565b60405180910390fd5b61271b838383612bd2565b612726600082612493565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127769190613d85565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127cd9190613cfe565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461288c838383612bd7565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128f790613a21565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516129f19190613938565b60405180910390a3505050565b612a0984848461262a565b612a1584848484612bdc565b612a54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4b906139c1565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000821415612ab9576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612bcd565b600082905060005b60008214612aeb578080612ad490613ed2565b915050600a82612ae49190613d54565b9150612ac1565b60008167ffffffffffffffff811115612b0757612b06614008565b5b6040519080825280601f01601f191660200182016040528015612b395781602001600182028036833780820191505090505b5090505b60008514612bc657600182612b529190613d85565b9150600a85612b619190613f1b565b6030612b6d9190613cfe565b60f81b818381518110612b8357612b82613fd9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612bbf9190613d54565b9450612b3d565b8093505050505b919050565b505050565b505050565b6000612bfd8473ffffffffffffffffffffffffffffffffffffffff16612d73565b15612d66578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612c2661248b565b8786866040518563ffffffff1660e01b8152600401612c4894939291906138ca565b602060405180830381600087803b158015612c6257600080fd5b505af1925050508015612c9357506040513d601f19601f82011682018060405250810190612c9091906131b2565b60015b612d16573d8060008114612cc3576040519150601f19603f3d011682016040523d82523d6000602084013e612cc8565b606091505b50600081511415612d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d05906139c1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612d6b565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612da290613e6f565b90600052602060002090601f016020900481019282612dc45760008555612e0b565b82601f10612ddd57805160ff1916838001178555612e0b565b82800160010185558215612e0b579182015b82811115612e0a578251825591602001919060010190612def565b5b509050612e189190612e5c565b5090565b508054612e2890613e6f565b6000825580601f10612e3a5750612e59565b601f016020900490600052602060002090810190612e589190612e5c565b5b50565b5b80821115612e75576000816000905550600101612e5d565b5090565b6000612e8c612e8784613bef565b613bca565b905082815260208101848484011115612ea857612ea761403c565b5b612eb3848285613e2d565b509392505050565b6000612ece612ec984613c20565b613bca565b905082815260208101848484011115612eea57612ee961403c565b5b612ef5848285613e2d565b509392505050565b600081359050612f0c816143ea565b92915050565b600081359050612f2181614401565b92915050565b600081359050612f3681614418565b92915050565b600081519050612f4b81614418565b92915050565b600082601f830112612f6657612f65614037565b5b8135612f76848260208601612e79565b91505092915050565b600082601f830112612f9457612f93614037565b5b8135612fa4848260208601612ebb565b91505092915050565b600081359050612fbc8161442f565b92915050565b600060208284031215612fd857612fd7614046565b5b6000612fe684828501612efd565b91505092915050565b6000806040838503121561300657613005614046565b5b600061301485828601612efd565b925050602061302585828601612efd565b9150509250929050565b60008060006060848603121561304857613047614046565b5b600061305686828701612efd565b935050602061306786828701612efd565b925050604061307886828701612fad565b9150509250925092565b6000806000806080858703121561309c5761309b614046565b5b60006130aa87828801612efd565b94505060206130bb87828801612efd565b93505060406130cc87828801612fad565b925050606085013567ffffffffffffffff8111156130ed576130ec614041565b5b6130f987828801612f51565b91505092959194509250565b6000806040838503121561311c5761311b614046565b5b600061312a85828601612efd565b925050602061313b85828601612f12565b9150509250929050565b6000806040838503121561315c5761315b614046565b5b600061316a85828601612efd565b925050602061317b85828601612fad565b9150509250929050565b60006020828403121561319b5761319a614046565b5b60006131a984828501612f27565b91505092915050565b6000602082840312156131c8576131c7614046565b5b60006131d684828501612f3c565b91505092915050565b6000602082840312156131f5576131f4614046565b5b600082013567ffffffffffffffff81111561321357613212614041565b5b61321f84828501612f7f565b91505092915050565b6000806040838503121561323f5761323e614046565b5b600083013567ffffffffffffffff81111561325d5761325c614041565b5b61326985828601612f7f565b925050602083013567ffffffffffffffff81111561328a57613289614041565b5b61329685828601612f7f565b9150509250929050565b600080604083850312156132b7576132b6614046565b5b600083013567ffffffffffffffff8111156132d5576132d4614041565b5b6132e185828601612f7f565b92505060206132f285828601612fad565b9150509250929050565b60006020828403121561331257613311614046565b5b600061332084828501612fad565b91505092915050565b600080604083850312156133405761333f614046565b5b600061334e85828601612fad565b925050602083013567ffffffffffffffff81111561336f5761336e614041565b5b61337b85828601612f7f565b9150509250929050565b60008060006060848603121561339e5761339d614046565b5b60006133ac86828701612fad565b935050602084013567ffffffffffffffff8111156133cd576133cc614041565b5b6133d986828701612f7f565b925050604084013567ffffffffffffffff8111156133fa576133f9614041565b5b61340686828701612f7f565b9150509250925092565b6000806040838503121561342757613426614046565b5b600061343585828601612fad565b925050602061344685828601612fad565b9150509250929050565b60008060006060848603121561346957613468614046565b5b600061347786828701612fad565b935050602061348886828701612fad565b925050604084013567ffffffffffffffff8111156134a9576134a8614041565b5b6134b586828701612f7f565b9150509250925092565b60006134cb838361361e565b905092915050565b6134dc81613db9565b82525050565b60006134ed82613c76565b6134f78185613ca4565b93508360208202850161350985613c51565b8060005b85811015613545578484038952815161352685826134bf565b945061353183613c97565b925060208a0199505060018101905061350d565b50829750879550505050505092915050565b61356081613dcb565b82525050565b600061357182613c81565b61357b8185613cb5565b935061358b818560208601613e3c565b6135948161404b565b840191505092915050565b600081546135ac81613e6f565b6135b68186613cc6565b945060018216600081146135d157600181146135e257613615565b60ff19831686528186019350613615565b6135eb85613c61565b60005b8381101561360d578154818901526001820191506020810190506135ee565b838801955050505b50505092915050565b600061362982613c8c565b6136338185613cd1565b9350613643818560208601613e3c565b61364c8161404b565b840191505092915050565b600061366282613c8c565b61366c8185613ce2565b935061367c818560208601613e3c565b6136858161404b565b840191505092915050565b600061369b82613c8c565b6136a58185613cf3565b93506136b5818560208601613e3c565b80840191505092915050565b60006136ce603283613ce2565b91506136d98261405c565b604082019050919050565b60006136f1602583613ce2565b91506136fc826140ab565b604082019050919050565b6000613714602483613ce2565b915061371f826140fa565b604082019050919050565b6000613737601983613ce2565b915061374282614149565b602082019050919050565b600061375a602c83613ce2565b915061376582614172565b604082019050919050565b600061377d603883613ce2565b9150613788826141c1565b604082019050919050565b60006137a0602a83613ce2565b91506137ab82614210565b604082019050919050565b60006137c3602983613ce2565b91506137ce8261425f565b604082019050919050565b60006137e6602c83613ce2565b91506137f1826142ae565b604082019050919050565b6000613809602f83613ce2565b9150613814826142fd565b604082019050919050565b600061382c602183613ce2565b91506138378261434c565b604082019050919050565b600061384f603183613ce2565b915061385a8261439b565b604082019050919050565b61386e81613e23565b82525050565b6000613880828461359f565b915081905092915050565b60006138978285613690565b91506138a38284613690565b91508190509392505050565b60006020820190506138c460008301846134d3565b92915050565b60006080820190506138df60008301876134d3565b6138ec60208301866134d3565b6138f96040830185613865565b818103606083015261390b8184613566565b905095945050505050565b6000602082019050818103600083015261393081846134e2565b905092915050565b600060208201905061394d6000830184613557565b92915050565b6000602082019050818103600083015261396d8184613657565b905092915050565b6000606082019050818103600083015261398f8186613657565b905081810360208301526139a38185613657565b905081810360408301526139b78184613657565b9050949350505050565b600060208201905081810360008301526139da816136c1565b9050919050565b600060208201905081810360008301526139fa816136e4565b9050919050565b60006020820190508181036000830152613a1a81613707565b9050919050565b60006020820190508181036000830152613a3a8161372a565b9050919050565b60006020820190508181036000830152613a5a8161374d565b9050919050565b60006020820190508181036000830152613a7a81613770565b9050919050565b60006020820190508181036000830152613a9a81613793565b9050919050565b60006020820190508181036000830152613aba816137b6565b9050919050565b60006020820190508181036000830152613ada816137d9565b9050919050565b60006020820190508181036000830152613afa816137fc565b9050919050565b60006020820190508181036000830152613b1a8161381f565b9050919050565b60006020820190508181036000830152613b3a81613842565b9050919050565b6000602082019050613b566000830184613865565b92915050565b6000604082019050613b716000830185613865565b8181036020830152613b838184613657565b90509392505050565b6000606082019050613ba16000830186613865565b613bae6020830185613865565b8181036040830152613bc08184613657565b9050949350505050565b6000613bd4613be5565b9050613be08282613ea1565b919050565b6000604051905090565b600067ffffffffffffffff821115613c0a57613c09614008565b5b613c138261404b565b9050602081019050919050565b600067ffffffffffffffff821115613c3b57613c3a614008565b5b613c448261404b565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613d0982613e23565b9150613d1483613e23565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613d4957613d48613f4c565b5b828201905092915050565b6000613d5f82613e23565b9150613d6a83613e23565b925082613d7a57613d79613f7b565b5b828204905092915050565b6000613d9082613e23565b9150613d9b83613e23565b925082821015613dae57613dad613f4c565b5b828203905092915050565b6000613dc482613e03565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613e5a578082015181840152602081019050613e3f565b83811115613e69576000848401525b50505050565b60006002820490506001821680613e8757607f821691505b60208210811415613e9b57613e9a613faa565b5b50919050565b613eaa8261404b565b810181811067ffffffffffffffff82111715613ec957613ec8614008565b5b80604052505050565b6000613edd82613e23565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613f1057613f0f613f4c565b5b600182019050919050565b6000613f2682613e23565b9150613f3183613e23565b925082613f4157613f40613f7b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6143f381613db9565b81146143fe57600080fd5b50565b61440a81613dcb565b811461441557600080fd5b50565b61442181613dd7565b811461442c57600080fd5b50565b61443881613e23565b811461444357600080fd5b5056fea2646970667358221220620f8cc0aedd76871adfe78d030e060a6d8a29f1c52edc643a1a473dc7c9fac964736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1614,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "_dao_ids",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1616,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "_goal_ids",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1618,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "_ideas_ids",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1620,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "_ideas_vote_ids",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1625,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "_dao_uris",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(dao_uri_struct)1595_storage)"
      },
      {
        "astId": 1630,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "_goal_uris",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(goal_uri_struct)1600_storage)"
      },
      {
        "astId": 1635,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "_ideas_uris",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(ideas_uri_struct)1605_storage)"
      },
      {
        "astId": 1640,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "all_goal_ideas_votes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)1612_storage)"
      },
      {
        "astId": 1642,
        "contract": "contracts/CoinExERC721.sol:CoinExERC721",
        "label": "owner",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(dao_uri_struct)1595_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoinExERC721.dao_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(dao_uri_struct)1595_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_ideas_votes_struct)1612_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoinExERC721.goal_ideas_votes_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_ideas_votes_struct)1612_storage"
      },
      "t_mapping(t_uint256,t_struct(goal_uri_struct)1600_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoinExERC721.goal_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(goal_uri_struct)1600_storage"
      },
      "t_mapping(t_uint256,t_struct(ideas_uri_struct)1605_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CoinExERC721.ideas_uri_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(ideas_uri_struct)1605_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(dao_uri_struct)1595_storage": {
        "encoding": "inplace",
        "label": "struct CoinExERC721.dao_uri_struct",
        "members": [
          {
            "astId": 1590,
            "contract": "contracts/CoinExERC721.sol:CoinExERC721",
            "label": "dao_wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1592,
            "contract": "contracts/CoinExERC721.sol:CoinExERC721",
            "label": "dao_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1594,
            "contract": "contracts/CoinExERC721.sol:CoinExERC721",
            "label": "finished",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(goal_ideas_votes_struct)1612_storage": {
        "encoding": "inplace",
        "label": "struct CoinExERC721.goal_ideas_votes_struct",
        "members": [
          {
            "astId": 1607,
            "contract": "contracts/CoinExERC721.sol:CoinExERC721",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1609,
            "contract": "contracts/CoinExERC721.sol:CoinExERC721",
            "label": "ideas_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1611,
            "contract": "contracts/CoinExERC721.sol:CoinExERC721",
            "label": "wallet",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(goal_uri_struct)1600_storage": {
        "encoding": "inplace",
        "label": "struct CoinExERC721.goal_uri_struct",
        "members": [
          {
            "astId": 1597,
            "contract": "contracts/CoinExERC721.sol:CoinExERC721",
            "label": "dao_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1599,
            "contract": "contracts/CoinExERC721.sol:CoinExERC721",
            "label": "goal_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ideas_uri_struct)1605_storage": {
        "encoding": "inplace",
        "label": "struct CoinExERC721.ideas_uri_struct",
        "members": [
          {
            "astId": 1602,
            "contract": "contracts/CoinExERC721.sol:CoinExERC721",
            "label": "goal_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1604,
            "contract": "contracts/CoinExERC721.sol:CoinExERC721",
            "label": "ideas_uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}